#lang racket
(define (square-sum a b)
    (+ (* a a) (* b b)))
(define (square-greater-two a b c)
    (if (>= a b)
        (if (>= b c)
            (square-sum a b)
            (square-sum a c))
        (if (>= a c)
            (square-sum b a)
            (square-sum b c))))
(define (power-close-to b n)
  (define (still-lower? a)
    (if (< a n)
    #t
    #f))
  (define (which-power x)
    (if (still-lower? (expt b x))
        (which-power (+ x 1))
        x))
  (which-power 0))
(power-close-to 2 10000)
(square-greater-two 3 1 2)